name: Build

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose the environment to deploy to (dev, qa, prod)'
        required: true
        default: 'qa'
        type: choice
        options:
          - dev
          - qa
          - prod
      
      platform:
        description: 'Select platform to build (android, ios, both)'
        required: true
        default: 'both'
        type: choice
        options:
          - android
          - ios
          - both

jobs:
  build_android:
    name: Build Android 
    runs-on: ubuntu-latest
    if: github.event.inputs.platform == 'android' || github.event.inputs.platform == 'both'
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4


      - name: Set Up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"
          cache: "gradle"


      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "yarn"


      - name: Install Dependencies
        run: yarn install --immutable


      - name: Copy Environment Secret Files  
        env:
          ENV_BASE64: ${{ secrets.ENV }}
        run: |
          ENV_FILE="$RUNNER_TEMP/.env"
          echo -n "$ENV_BASE64" | base64 --decode > $ENV_FILE
          echo "Environment file created from ${{ github.event.inputs.environment }}"
          cp $ENV_FILE $GITHUB_WORKSPACE/.env 
          

      - name: Verify .env File
        run: |
          if [ -f .env ]; then
            echo ".env file exists!"
          else
            echo ".env file is missing!"
            exit 1
          fi

      - name: Generate Unique Build Number
        id: build_number
        run: |
          DATE=$(date +'%d%m%y')
          INCREMENTAL_NUMBER=$(printf "%02d" ${{ github.run_number }})
          BUILD_NUMBER="${DATE}${INCREMENTAL_NUMBER}"
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV


      - name: Update Android Version Code
        run: |
          sed -i "s/versionCode [0-9]\+/versionCode $BUILD_NUMBER/" android/app/build.gradle


      - name: Build APK
        run: |
          cd android
          export ENVFILE=../.env
          ./gradlew assembleRelease


      - name: Sign APK
        uses: upup-company/apksigner-android@v1
        id: sign_app
        with:
          releaseDirectory: android/app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.ANDROID_KEYSTORE }}
          alias: ${{ secrets.RELEASE_KEYSTORE_ALIAS }}
          keyStorePassword: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.RELEASE_KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: "34.0.0"


      - name: Verify APK Path
        run: |
          echo "APK Path: ${{ steps.sign_app.outputs.signedReleaseFile }}"


      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk
          path: ${{ steps.sign_app.outputs.signedReleaseFile }}

  build_ios:
    name: Build iOS 
    runs-on: macos-latest
    if: github.event.inputs.platform == 'ios' || github.event.inputs.platform == 'both'
    environment: ${{ github.event.inputs.environment }}


    steps:
      - name: Checkout Code
        uses: actions/checkout@v4


      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "yarn"


      - name: Install Dependencies
        run: yarn install --immutable


      - name: Install Pods
        run: cd ios && pod install --repo-update


      - name: Copy Environment Secret Files
        env:
          ENV_BASE64: ${{ secrets.ENV }}
        run: |
          ENV_FILE="$RUNNER_TEMP/.env"
          echo -n "$ENV_BASE64" | base64 --decode > $ENV_FILE
          echo "Environment file created from ${{ github.event.inputs.environment }}"
          cp $ENV_FILE $GITHUB_WORKSPACE/.env 

          
      - name: Verify .env File
        run: |
          if [ -f .env ]; then
          echo ".env file exists!"
          else
          echo ".env file is missing!"
          exit 1
          fi
          

      - name: Generate Unique Build Number
        id: build_number
        run: |
          DATE=$(date +'%d%m%y')
          INCREMENTAL_NUMBER=$(printf "%02d" ${{ github.run_number }})
          BUILD_NUMBER="${DATE}${INCREMENTAL_NUMBER}"
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV

          
      - name: Update iOS Build Number
        run: |
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUMBER" ios/react_native/Info.plist


      - name: Install iOS Distribution Certificate and Provisioning Profile
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_CERTIFICATE_BASE64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_PASSWORD }}
          PROVISIONING_PROFILE_BASE64: ${{ github.event.inputs.environment == 'prod' && secrets.IOS_APPSTORE_PROFILE || secrets.IOS_ADHOC_PROFILE }}
          KEYCHAIN_PASSWORD: 123456
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$APPLE_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          

      - name: Install private API key P8
        env:
          APPLE_KEY_BASE64: ${{ secrets.APPLE_KEY_BASE64 }}
          APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
        run: |
          mkdir -p ~/private_keys
          echo "$APPLE_KEY_BASE64" | base64 --decode > ~/private_keys/AuthKey_$APPLE_KEY_ID.p8


      - name: Verify Certificates
        run: security find-identity -v -p codesigning

      - name: Verify Provisioning Profile
        run: ls -l ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Create Export Options Plist
        run: |
          if [ "${{ github.event.inputs.environment }}" == "prod" ]; then
            PROVISIONING_PROFILE="lrg_appstore"
            EXPORT_METHOD="app-store-connect"
          else
            PROVISIONING_PROFILE="lrg_adhoc"
            EXPORT_METHOD="release-testing"
          fi

          cat <<EOF > ios/ExportOptions.plist
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>destination</key>
              <string>export</string>
              <key>method</key>
              <string>$EXPORT_METHOD</string>
              <key>provisioningProfiles</key>
              <dict>
                <key>com.lrg.riskconcierge</key>
                <string>$PROVISIONING_PROFILE</string>
              </dict>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>teamID</key>
              <string>${{ secrets.APPLE_TEAM_ID }}</string>
              <key>thinning</key>
              <string>&lt;none&gt;</string>
          </dict>
          </plist>
          EOF
          
      - name: Debug ExportOptions.plist
        run: cat ios/ExportOptions.plist

      - name: Debug Installed Provisioning Profile
        run: security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
      
      - name: Build Archive
        run: |
            if [ "${{ github.event.inputs.environment }}" == "prod" ]; then
            PROVISIONING_PROFILE="lrg_appstore"
            else
              PROVISIONING_PROFILE="lrg_adhoc"
            fi
            ENVFILE=../.env
            cd ios
            xcodebuild -workspace react_native.xcworkspace \
            -scheme react_native \
            -archivePath $RUNNER_TEMP/react_native.xcarchive \
            -sdk iphoneos \
            -configuration Release \
            -destination generic/platform=iOS \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE" \
            archive

      - name: export ipa
        run: |
            xcodebuild -exportArchive -archivePath $RUNNER_TEMP/react_native.xcarchive -exportOptionsPlist ios/ExportOptions.plist -exportPath $RUNNER_TEMP/build

      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-release-ipa
          path: ${{ runner.temp }}/build/react_native.ipa

      - name: Upload to TestFlight
        if: github.event.inputs.environment == 'prod'
        env:
          APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
          APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
        run: |
          xcrun altool --output-format xml --upload-app -t ios -f "$RUNNER_TEMP/build/react_native.ipa" \
          --apiKey "$APPLE_KEY_ID" \
          --apiIssuer "$APPLE_ISSUER_ID" \
          --verbose

      - name: Clean up keychain and provisioning profile
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
